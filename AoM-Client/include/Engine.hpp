////////////////////////////////////////////////////////////////////////////////////////////////////
/// This file is subject to the terms and conditions defined in                                  ///
/// file 'LICENSE', which is part of this source code package.                                   ///
////////////////////////////////////////////////////////////////////////////////////////////////////
#ifndef _ENGINE_HPP_
#define _ENGINE_HPP_

////////////////////////////////////////////////////////////////////////////////////////////////////
/// Declarations
////////////////////////////////////////////////////////////////////////////////////////////////////
#include <EngineAPI.hpp>

////////////////////////////////////////////////////////////////////////////////////////////////////
/// Protocol Definition
////////////////////////////////////////////////////////////////////////////////////////////////////
#define PROTOCOL_PORT           10000
#define PROTOCOL_RECONNECT_TIME 2500

#define MESSAGE_ID_CLIENT       0x01
#define MESSAGE_ID_SERVER       0x02
#define MESSAGE_ID_PING         0x03

////////////////////////////////////////////////////////////////////////////////////////////////////
/// Engine namespace
////////////////////////////////////////////////////////////////////////////////////////////////////
namespace Engine
{
    ////////////////////////////////////////////////////////////////////////////////////////////////
    /// Constructor of \see Engine
    ///
    /// \param[in] hModule A reference to the DLL
    ////////////////////////////////////////////////////////////////////////////////////////////////
    VOID Constructor(HMODULE hModule);

    ////////////////////////////////////////////////////////////////////////////////////////////////
    /// Destructor of \see Engine
    ////////////////////////////////////////////////////////////////////////////////////////////////
    VOID Destructor();

    ////////////////////////////////////////////////////////////////////////////////////////////////
    /// Connect the session to the given port.
    ////////////////////////////////////////////////////////////////////////////////////////////////
    VOID NetConnect();

    ////////////////////////////////////////////////////////////////////////////////////////////////
    /// Close the session.
    ////////////////////////////////////////////////////////////////////////////////////////////////
    VOID NetClose();

    ////////////////////////////////////////////////////////////////////////////////////////////////
    /// Send a message to the session.
    ///
    /// \param[in] pbBuffer    The reference of the buffer.
    /// \param[in] iLength     The capacity of the buffer.
    /// \param[in] bClientSide True if the message is from the client side, false otherwise.
    ////////////////////////////////////////////////////////////////////////////////////////////////
    VOID NetMessage(LPBYTE pbBuffer, INT iLength, BOOL bClientSide);

    ////////////////////////////////////////////////////////////////////////////////////////////////
    /// Handle the read operation of the session.
    ////////////////////////////////////////////////////////////////////////////////////////////////
    VOID NetHandle();
};

#endif // _ENGINE_HPP_