////////////////////////////////////////////////////////////////////////////////////////////////////
/// This file is subject to the terms and conditions defined in                                  ///
/// file 'LICENSE', which is part of this source code package.                                   ///
////////////////////////////////////////////////////////////////////////////////////////////////////
#include <Foundation/Foundation.hpp>

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////
static TDetour m_RecvDetour;
static TDetour m_SendDetour;
static TDetour m_GetTickCountDetour;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// TRAMPOLINE
////////////////////////////////////////////////////////////////////////////////////////////////////
VOID WINAPI OnRecvMessage(BSTR szbMessage)
{

    Engine::NetMessage((LPBYTE) szbMessage, COM_SIZE(szbMessage) * 0x02, FALSE);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// TRAMPOLINE
////////////////////////////////////////////////////////////////////////////////////////////////////
VOID WINAPI OnSendMessage(BSTR *szbMessage)
{

    Engine::NetMessage((LPBYTE) *szbMessage, COM_SIZE(*szbMessage) * 0x02, TRUE);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// TRAMPOLINE
////////////////////////////////////////////////////////////////////////////////////////////////////
VOID WINAPI OnLoop()
{

    Engine::NetHandle();
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// HOOK
////////////////////////////////////////////////////////////////////////////////////////////////////
GENERATE_METHOD_1F(HkRcvData,      OnRecvMessage,  m_RecvDetour.lpTrampoline);
GENERATE_METHOD_1F(HkSndData,      OnSendMessage,  m_SendDetour.lpTrampoline);
GENERATE_METHOD_0F(HkGetTickCount, OnLoop,         m_GetTickCountDetour.lpTrampoline);

////////////////////////////////////////////////////////////////////////////////////////////////////
/// IMPLEMENTATION
////////////////////////////////////////////////////////////////////////////////////////////////////
VOID Foundation::OnCreate()
{
    //!
    //! Attach all trampolines.
    //! 
    Memory::MmWrite((LPVOID) 0x6CF9F0, (LPVOID) &HkRcvData, &m_RecvDetour);
    Memory::MmWrite((LPVOID) 0x715810, (LPVOID) &HkSndData, &m_SendDetour);

    LPVOID lpMethod = EngineAPI::GetFunction(EngineAPI::GetModule(MODULE_KERNEL), 0xF791FB23);
    Memory::MmWrite(lpMethod, (LPVOID) &HkGetTickCount, &m_GetTickCountDetour);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// IMPLEMENTATION
////////////////////////////////////////////////////////////////////////////////////////////////////
VOID Foundation::OnDestroy()
{
    //!
    //! Erase all trampolines.
    //! 
    Memory::MmErase(m_RecvDetour);
    Memory::MmErase(m_SendDetour);
    Memory::MmErase(m_GetTickCountDetour);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// IMPLEMENTATION
////////////////////////////////////////////////////////////////////////////////////////////////////
VOID Foundation::OnSend(LPCSTR szwData, DWORD dwLength)
{
    //!
    //! Allocate the packet
    //!
    BSTR sbMessage = COM_ALLOCATE_STRING((LPCWSTR) szwData);

    //!
    //! Send the packet
    //!
    ((VOID (WINAPI *)(BSTR *)) m_SendDetour.lpTrampoline)(&sbMessage);

    //!
    //! Free the packet
    //!
    COM_FREE(sbMessage);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// IMPLEMENTATION
////////////////////////////////////////////////////////////////////////////////////////////////////
VOID Foundation::OnReceive(LPCSTR szwData, DWORD dwLength)
{
    //!
    //! Allocate the packet
    //!
    BSTR sbMessage = COM_ALLOCATE_STRING((LPCWSTR) szwData);

    //!
    //! Send the packet
    //!
    ((VOID (WINAPI *)(BSTR)) m_RecvDetour.lpTrampoline)(sbMessage);

    //!
    //! Free the packet
    //!
    COM_FREE(sbMessage);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// IMPLEMENTATION
////////////////////////////////////////////////////////////////////////////////////////////////////
WORD Foundation::GetPort()
{

    return 10001;
}