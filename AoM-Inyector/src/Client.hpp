////////////////////////////////////////////////////////////////////////////////////////////////////
/// This file is subject to the terms and conditions defined in                                  ///
/// file 'LICENSE.txt', which is part of this source code package.                               ///
////////////////////////////////////////////////////////////////////////////////////////////////////
#ifndef _CLIENT_HPP_
#define _CLIENT_HPP_

////////////////////////////////////////////////////////////////////////////////////////////////////
/// Declarations
////////////////////////////////////////////////////////////////////////////////////////////////////
#include "ClientAPI.hpp"

////////////////////////////////////////////////////////////////////////////////////////////////////
/// Number of arguments the application has
////////////////////////////////////////////////////////////////////////////////////////////////////
#define ARGUMENT_COUNT    0x03

////////////////////////////////////////////////////////////////////////////////////////////////////
/// Define all possible error types
////////////////////////////////////////////////////////////////////////////////////////////////////
enum Error
{
    IX_OK = 0,
    IX_ERROR_PROCESS_NOT_FOUND,
    IX_ERROR_PROCESS_NOT_OPEN,
    IX_ERROR_PROCESS_NOT_ALLOCATED,
    IX_ERROR_PROCESS_NOT_WRITE,
    IX_ERROR_THREAD_NOT_FOUND,
    IX_ERROR_THREAD_NOT_OPEN,
    IX_ERROR
};

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @namespace: Client
////////////////////////////////////////////////////////////////////////////////////////////////////
namespace Client
{
    ////////////////////////////////////////////////////////////////////////////////////////////////
    /// Main entry of the application
    ////////////////////////////////////////////////////////////////////////////////////////////////
    VOID Execute();

    ////////////////////////////////////////////////////////////////////////////////////////////////
    /// Execute the given shellcode into a process
    ///
    /// \param[in] hHandle      The handle of the target process
    /// \param[in] hThread      The handle of the target thread within the process
    /// \param[in] szwcFilename The filename to be inyected into the process
    /// \return An error enumeration or IX_OK if everything went well
    ////////////////////////////////////////////////////////////////////////////////////////////////
    Error Execute(HANDLE hHandle, HANDLE hThread, LPCWSTR szwcFilename);

    ////////////////////////////////////////////////////////////////////////////////////////////////
    /// Retrieve the command line
    ///
    /// \param[in] szwProcess   The buffer to store the filename or process name
    /// \param[in] szwFilename  The filename that will commit to the process
    /// \param[in] pbIsLaunched The buffer to store if the user wants to launch or inyect
    ////////////////////////////////////////////////////////////////////////////////////////////////
    VOID GetCommandLine(LPWSTR szwProcess, LPWSTR szwFilename, LPBOOL pbIsLaunched);

    ////////////////////////////////////////////////////////////////////////////////////////////////
    /// Gets the process thread of the given process
    ///
    /// \param[in] dwProcessID The unique identifier of the process
    /// \return The unique handle of the main thread for the given process
    ////////////////////////////////////////////////////////////////////////////////////////////////
    DWORD GetThread(DWORD dwProcessID);
    
    ////////////////////////////////////////////////////////////////////////////////////////////////
    /// Gets the process handle of the given process
    ///
    /// \param[in] dwProcessID The unique identifier of the process
    /// \return The unique handle for the given process
    ////////////////////////////////////////////////////////////////////////////////////////////////
    DWORD GetProcess(DWORD dwProcessID);
};

#endif // _CLIENT_HPP_